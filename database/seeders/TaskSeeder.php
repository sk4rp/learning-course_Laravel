<?php

namespace Database\Seeders;

use App\Models\Task;
use Illuminate\Database\Seeder;

class TaskSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        Task::create([
            'name' => 'Привет, мир!',
            'theory' => 'Программы на JavaScript могут быть вставлены в любое место HTML-документа с помощью тега <script>. Для добавления кода JavaScript на страницу используется тег <script> Атрибуты type и language необязательны. Скрипт во внешнем файле можно вставить с помощью <script src="path/to/script.js"></script>.',
            'task' => 'Создайте страницу, которая отобразит сообщение «Я JavaScript!». Выполните это задание в песочнице, либо на вашем жёстком диске, где – неважно, главное – проверьте, что она работает.',
            'theme_id' => 1,
        ]);

        Task::create([
            'name' => 'Переменные',
            'theory' => 'Переменная – это «именованное хранилище» для данных. Мы можем использовать переменные для хранения товаров, посетителей и других данных. Для создания переменной в JavaScript используйте ключевое слово let.',
            'task' => 'Создайте переменную для названия нашей планеты. Как бы вы её назвали? Создайте переменную для хранения имени текущего посетителя сайта. Как бы вы назвали такую переменную?',
            'theme_id' => 1,
        ]);


        Task::create([
            'name' => 'Типы данных',
            'theory' => 'Значение в JavaScript всегда относится к данным определённого типа. Например, это может быть строка или число. Есть восемь основных типов данных в JavaScript. В этой главе мы рассмотрим их в общем, а в следующих главах поговорим подробнее о каждом. Переменная в JavaScript может содержать любые данные. В один момент там может быть строка, а в другой – число.',
            'task' => 'Что выведет: alert( `hello ${1}` ); ?',
            'theme_id' => 1,
        ]);

        Task::create([
            'name' => 'Объекты',
            'theory' => 'Как мы знаем из главы Типы данных, в JavaScript существует 8 типов данных. Семь из них называются «примитивными», так как содержат только одно значение (будь то строка, число или что-то другое). Объекты же используются для хранения коллекций различных значений и более сложных сущностей. В JavaScript объекты используются очень часто, это одна из основ языка. Поэтому мы должны понять их, прежде чем углубляться куда-либо ещё. Объект может быть создан с помощью фигурных скобок {…} с необязательным списком свойств. Свойство – это пара «ключ: значение», где ключ – это строка (также называемая «именем свойства»), а значение может быть чем угодно. Мы можем представить объект в виде ящика с подписанными папками. Каждый элемент данных хранится в своей папке, на которой написан ключ. По ключу папку легко найти, удалить или добавить в неё что-либо.',
            'task' => 'Можно ли изменить объект, объявленный с помощью const? Как вы думаете?',
            'theme_id' => 2,
        ]);

        Task::create([
            'name' => 'Массивы',
            'theory' => 'Объекты позволяют хранить данные со строковыми ключами. Это замечательно. Но довольно часто мы понимаем, что нам необходима упорядоченная коллекция данных, в которой присутствуют 1-й, 2-й, 3-й элементы и т.д. Например, она понадобится нам для хранения списка чего-либо: пользователей, товаров, элементов HTML и т.д. В этом случае использовать объект неудобно, так как он не предоставляет методов управления порядком элементов. Мы не можем вставить новое свойство «между» уже существующими. Объекты просто не предназначены для этих целей. Для хранения упорядоченных коллекций существует особая структура данных, которая называется массив, Array.',
            'task' => 'Напишите функцию sumInput(), которая: Просит пользователя ввести значения, используя prompt и сохраняет их в массив. Заканчивает запрашивать значения, когда пользователь введёт не числовое значение, пустую строку или нажмёт «Отмена». Подсчитывает и возвращает сумму элементов массива.',
            'theme_id' => 2,
        ]);

        Task::create([
            'name' => 'Строки',
            'theory' => 'В JavaScript любые текстовые данные являются строками. Не существует отдельного типа «символ», который есть в ряде других языков. Внутренний формат для строк — всегда UTF-16, вне зависимости от кодировки страницы.',
            'task' => 'Создайте страницу, которая отобразит сообщение «Я JavaScript!». Выполните это задание в песочнице, либо на вашем жёстком диске, где – неважно, главное – проверьте, что она работает.',
            'theme_id' => 2,
        ]);

        Task::create([
            'name' => 'Методы массивов',
            'theory' => 'Массивы предоставляют множество методов. Чтобы было проще, в этой главе они разбиты на группы. arr.push(...items) – добавляет элементы в конец, arr.pop() – извлекает элемент из конца, arr.shift() – извлекает элемент из начала, arr.unshift(...items) – добавляет элементы в начало.',
            'task' => 'Напишите функцию unique(arr), которая возвращает массив, содержащий только уникальные элементы arr.',
            'theme_id' => 3,
        ]);

        Task::create([
            'name' => 'Класс: базовый синтаксис',
            'theory' => 'В объектно-ориентированном программировании класс – это расширяемый шаблон кода для создания объектов, который устанавливает в них начальные значения (свойства) и реализацию поведения (методы). На практике нам часто надо создавать много объектов одного вида, например пользователей, товары или что-то ещё. Как мы уже знаем из главы Конструктор, оператор "new", с этим может помочь new function. Но в современном JavaScript есть и более продвинутая конструкция «class», которая предоставляет новые возможности, полезные для объектно-ориентированного программирования.',
            'task' => 'Класс Clock написан в функциональном стиле. Перепишите его, используя современный синтаксис классов.',
            'theme_id' => 3,
        ]);

        Task::create([
            'name' => 'Наследование классов',
            'theory' => 'Наследование классов – это способ расширения одного класса другим классом. Таким образом, мы можем добавить новый функционал к уже существующему. Ключевое слово «extends»',
            'task' => 'Создайте новый класс ExtendedClock, который будет наследоваться от Clock и добавьте параметр precision – количество миллисекунд между «тиками». Установите значение в 1000 (1 секунда) по умолчанию. Сохраните ваш код в файл extended-clock.js. Не изменяйте класс clock.js. Расширьте его.',
            'theme_id' => 3,
        ]);


    }
}
